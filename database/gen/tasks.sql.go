// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: tasks.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks (title, description, due_date, is_completed)
VALUES ($1, $2, $3, $4)
`

type CreateTaskParams struct {
	Title       string
	Description pgtype.Text
	DueDate     pgtype.Date
	IsCompleted pgtype.Bool
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.Exec(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.IsCompleted,
	)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, title, description, due_date, is_completed
FROM tasks
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.DueDate,
			&i.IsCompleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnfinishedTasks = `-- name: GetAllUnfinishedTasks :many
SELECT id, title, description, due_date, is_completed
FROM tasks
WHERE is_completed = false
`

func (q *Queries) GetAllUnfinishedTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getAllUnfinishedTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.DueDate,
			&i.IsCompleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, title, description, due_date, is_completed
FROM tasks
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTaskById(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.IsCompleted,
	)
	return i, err
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE tasks
SET title = $2,
    description = $3,
    due_date = $4,
    is_completed = $5
WHERE id = $1
`

type UpdateAuthorParams struct {
	ID          int32
	Title       string
	Description pgtype.Text
	DueDate     pgtype.Date
	IsCompleted pgtype.Bool
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.Exec(ctx, updateAuthor,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.IsCompleted,
	)
	return err
}
